<?php

namespace Cradle\Framework;

use StdClass;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 13:49:45.
 */
class Cradle_Framework_CommandLine_Test extends TestCase
{
    /**
     * @var Package
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new CommandLine(__DIR__);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Framework\CommandLine::__construct
     * @covers Cradle\Framework\CommandLine::run
     * @covers Cradle\Framework\CommandLine::setMap
     */
    public function testRun()
    {
        CommandLine::setMap();

        $test = new StdClass();
        $test->triggered = false;
        CommandLine::setMap(function ($output) use ($test) {
            $test->triggered = true;
        });

        $this->object->run(['cradle', 'help']);
        $this->assertTrue($test->triggered);

        $test->triggered = false;
        cradle()->on('foobar', function() {});
        $this->object->run(['cradle', 'foobar', 'bootstrap=assets/bootstrap.php']);
        $this->assertTrue($test->triggered);

        $test->triggered = false;
        $this->object->run(['cradle', 'foo/bar', 'run', 'bootstrap=assets/bootstrap.php']);
        $this->assertTrue($test->triggered);
    }

    /**
     * @covers Cradle\Framework\CommandLine::error
     * @covers Cradle\Framework\CommandLine::output
     * @covers Cradle\Framework\CommandLine::setMap
     */
    public function testError()
    {
        $test = new StdClass();
        $test->results = false;
        CommandLine::setMap(function ($output) use ($test) {
            if($test->results === false) {
                $test->results = $output;
            }
        });

        CommandLine::error('Something Happened', false);
        $expected = sprintf("\033[31m%s\033[0m", '[cradle] Something Happened');
        $this->assertEquals($expected, $test->results);
    }

    /**
     * @covers Cradle\Framework\CommandLine::info
     * @covers Cradle\Framework\CommandLine::output
     */
    public function testInfo()
    {
        $test = new StdClass();
        $test->results = false;
        CommandLine::setMap(function ($output) use ($test) {
            if($test->results === false) {
                $test->results = $output;
            }
        });

        CommandLine::info('Something Happened', false);
        $expected = sprintf("\033[36m%s\033[0m", '[cradle] Something Happened');
        $this->assertEquals($expected, $test->results);
    }

    /**
     * @covers Cradle\Framework\CommandLine::parseArgs
     */
    public function testParseArgs()
    {
        $actual = CommandLine::parseArgs(['--foo', '--bar=baz', '--spam', 'eggs']);

        $this->assertEquals(1, $actual['foo']);
        $this->assertEquals('baz', $actual['bar']);
        $this->assertEquals('eggs', $actual['spam']);

        $actual = CommandLine::parseArgs(['-abc', 'foo']);

        $this->assertTrue($actual['a']);
        $this->assertTrue($actual['b']);
        $this->assertEquals('foo', $actual['c']);

        $actual = CommandLine::parseArgs(['arg1', 'arg2', 'arg3']);

        $this->assertEquals('arg1', $actual[0]);
        $this->assertEquals('arg2', $actual[1]);
        $this->assertEquals('arg3', $actual[2]);

        $args = 'plain-arg --foo --bar=baz --funny="spam=eggs" --also-funny=spam=eggs \'plain arg 2\' -abc -k=value "plain arg 3" --s="original" --s=\'overwrite\' --s';

        $actual = CommandLine::parseArgs(explode(' ', $args));
        $this->assertEquals('plain-arg', $actual[0]);
        $this->assertEquals(true, $actual['foo']);
        $this->assertEquals('baz', $actual['bar']);
        $this->assertEquals('"spam=eggs"', $actual['funny']);
        $this->assertEquals('spam=eggs', $actual['also-funny']);
        $this->assertEquals('\'plain', $actual[1]);
        $this->assertEquals(true, $actual['a']);
        $this->assertEquals(true, $actual['b']);
        $this->assertEquals(true, $actual['c']);
        $this->assertEquals('value', $actual['k']);
        $this->assertEquals('arg', $actual[2]);
        $this->assertEquals('\'overwrite\'', $actual['s']);

        $actual = CommandLine::parseArgs(['arg1=1']);
        $this->assertEquals('1', $actual['arg1']);
    }

    /**
     * @covers Cradle\Framework\CommandLine::success
     * @covers Cradle\Framework\CommandLine::output
     */
    public function testSuccess()
    {
        $test = new StdClass();
        $test->results = false;
        CommandLine::setMap(function ($output) use ($test) {
            if($test->results === false) {
                $test->results = $output;
            }
        });

        CommandLine::success('Something Happened', false);
        $expected = sprintf("\033[32m%s\033[0m", '[cradle] Something Happened');
        $this->assertEquals($expected, $test->results);
    }

    /**
     * @covers Cradle\Framework\CommandLine::system
     * @covers Cradle\Framework\CommandLine::output
     */
    public function testSystem()
    {
        $test = new StdClass();
        $test->results = false;
        CommandLine::setMap(function ($output) use ($test) {
            if($test->results === false) {
                $test->results = $output;
            }
        });

        CommandLine::system('Something Happened', false);
        $expected = sprintf("\033[34m%s\033[0m", '[cradle] Something Happened');
        $this->assertEquals($expected, $test->results);
    }

    /**
     * @covers Cradle\Framework\CommandLine::warning
     * @covers Cradle\Framework\CommandLine::output
     */
    public function testWarning()
    {
        $test = new StdClass();
        $test->results = false;
        CommandLine::setMap(function ($output) use ($test) {
            if($test->results === false) {
                $test->results = $output;
            }
        });

        CommandLine::warning('Something Happened', false);
        $expected = sprintf("\033[33m%s\033[0m", '[cradle] Something Happened');
        $this->assertEquals($expected, $test->results);
    }
}
