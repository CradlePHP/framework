<?php

namespace Cradle\Event;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:00.
 */
class Cradle_Event_EventObserver_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var EventObserver
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new EventObserver(function() {});
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Event\EventObserver::getCallback
     */
    public function testGetCallback()
    {
        $actual = $this->object->getCallback();
        $this->assertInstanceOf('Closure', $actual);
    }

    /**
     * @covers Cradle\Event\EventObserver::setCallback
     */
    public function testSetCallback()
    {
        $actual = $this->object->setCallback(function() {})->getCallback();
        $this->assertInstanceOf('Closure', $actual);
    }

    /**
     * @covers Cradle\Event\EventObserver::assertEquals
     * @covers Cradle\Event\EventObserver::getId
     */
    public function testAssertEquals()
    {
        $callback1 = function() {};
        $callback2 = function() {};

        $stub = new EventAssertStub;

        $this->object->setCallback($callback1);
        $this->assertTrue($this->object->assertEquals($callback1));
        $this->assertFalse($this->object->assertEquals($callback2));
        $this->assertFalse($this->object->assertEquals('count'));
        $this->assertFalse($this->object->assertEquals([$stub, 'foo']));
    }
}

class EventAssertStub
{
    public function foo()
    {
    }
}
