<?php

namespace Cradle\Framework;

use PHPUnit_Framework_TestCase;
use Cradle\Http\Request;
use Cradle\Http\Response;
use Cradle\Resolver\ResolverHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 13:49:45.
 */
class Cradle_Framework_Flow_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var Flow
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        Flow::register('foo', function($bar) {
            return 'foo'.$bar;
        });
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Framework\Flow::__callStatic
     */
    public function test__callStatic()
    {
        $this->assertEquals('foobar', Flow::__callStatic('foo', array('bar')));
    }

    /**
     * @covers Cradle\Framework\Flow::getResolver
     */
    public function testGetResolver()
    {
        $this->assertInstanceOf('Cradle\Resolver\ResolverHandler', Flow::getResolver());
    }

    /**
     * @covers Cradle\Framework\Flow::register
     */
    public function testRegister()
    {
        Flow::register('foo', function($bar) {
            return 'foo'.$bar;
        });

        $this->assertEquals('foobar', Flow::foo('bar'));
    }

    /**
     * @covers Cradle\Framework\Flow::setResolver
     */
    public function testSetResolver()
    {
        Flow::setResolver(new ResolverHandler);
    }

    /**
     * @covers Cradle\Framework\Flow::forward
     */
    public function testForward()
    {
        $callback = Flow::forward();
        $this->assertInstanceOf('Closure', $callback);

        $request = new Request;
        $response = new Response;

        $actual = $callback($request, $response);
        $this->assertNull($actual);

        $request->setStage('foo', 'bar');
        $response->setResults('foo', 'bar');

        $actual = $callback($request, $response);
        $this->assertNull($actual);
    }

    /**
     * @covers Cradle\Framework\Flow::reset
     */
    public function testReset()
    {
        $callback = Flow::reset();
        $this->assertInstanceOf('Closure', $callback);

        $request = new Request;
        $response = new Response;

        $actual = $callback($request, $response);
        $this->assertNull($actual);

        $request->setStage('foo', 'bar');
        $response->setResults('foo', 'bar');

        $actual = $callback($request, $response);
        $this->assertNull($actual);
    }
}
