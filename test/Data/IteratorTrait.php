<?php

namespace Cradle\Data;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:00.
 */
class Cradle_Data_IteratorTrait_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var IteratorTrait
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new IteratorTraitStub;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Data\IteratorTrait::current
     */
    public function testCurrent()
    {
		$actual = $this->object->current();
    	$this->assertEquals('bar', $actual);
    }

    /**
     * @covers Cradle\Data\IteratorTrait::key
     */
    public function testKey()
    {
        $actual = $this->object->key();
    	$this->assertEquals('foo', $actual);
    }

    /**
     * @covers Cradle\Data\IteratorTrait::next
     */
    public function testNext()
    {
		$this->object->next();
        $actual = $this->object->current();
    	$this->assertEquals('foo', $actual);
    }

    /**
     * @covers Cradle\Data\IteratorTrait::rewind
     */
    public function testRewind()
    {
		$this->object->rewind();
        $actual = $this->object->current();
    	$this->assertEquals('bar', $actual);
    }

    /**
     * @covers Cradle\Data\IteratorTrait::valid
     */
    public function testValid()
    {
        $this->assertTrue($this->object->valid());
    }
}

if(!class_exists('Cradle\Data\IteratorTraitStub')) {
	class IteratorTraitStub
	{
		use IteratorTrait;
		
		protected $data = array(
			'foo' => 'bar',
			'bar' => 'foo'
		);
	}
}
