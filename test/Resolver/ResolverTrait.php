<?php

namespace Cradle\Resolver;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Cradle_Resolver_ResolverTrait_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var ResolverTrait
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ResolverTraitStub;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Resolver\ResolverTrait::__callResolver
     */
    public function test__callResolver()
    {
        $actual = $this->object->__callResolver(ResolverCallStub::class, [])->foo('bar');
		$this->assertEquals('barfoo', $actual);
    }

    /**
     * @covers Cradle\Resolver\ResolverTrait::addResolver
     */
    public function testAddResolver()
    {
        $actual = $this->object->addResolver(ResolverCallStub::class, function() {});
		$this->assertInstanceOf('Cradle\Resolver\ResolverTraitStub', $actual);
    }

    /**
     * @covers Cradle\Resolver\ResolverTrait::getResolverHandler
     */
    public function testGetResolverHandler()
    {
        $actual = $this->object->getResolverHandler();
		$this->assertInstanceOf('Cradle\Resolver\ResolverInterface', $actual);
    }

    /**
     * @covers Cradle\Resolver\ResolverTrait::resolve
     */
    public function testResolve()
    {
        $actual = $this->object->addResolver(
			ResolverCallStub::class,
			function() {
				return new ResolverAddStub();
			}
		)
		->resolve(ResolverCallStub::class)
		->foo('bar');

        $this->assertEquals('barfoo', $actual);

        $trigger = false;

        try {
            $this->object->resolve('barfoo');
        } catch(ResolverException $e) {
            $trigger = true;
        }

        $this->assertTrue($trigger);

        $this->assertEquals('0', $this->object->resolve('strpos', 'Foobar', 'Foo'));
    }

    /**
     * @covers Cradle\Resolver\ResolverTrait::resolveShared
     */
    public function testResolveShared()
    {
        $actual = $this
			->object
			->resolveShared(ResolverSharedStub::class)
			->reset()
			->foo('bar');

        $this->assertEquals('barfoo', $actual);

		$actual = $this
			->object
			->resolveShared(ResolverSharedStub::class)
			->foo('bar');

        $this->assertEquals('barbar', $actual);
    }

    /**
     * @covers Cradle\Resolver\ResolverTrait::resolveStatic
     */
    public function testResolveStatic()
    {
        $actual = $this
			->object
			->resolveStatic(
				ResolverStaticStub::class,
				'foo',
				'bar'
			);

        $this->assertEquals('barfoo', $actual);
    }

    /**
     * @covers Cradle\Resolver\ResolverTrait::setResolverHandler
     */
    public function testSetResolverHandler()
    {
        $actual = $this->object->setResolverHandler(new ResolverHandlerStub);
		$this->assertInstanceOf('Cradle\Resolver\ResolverTraitStub', $actual);
    }
}

if(!class_exists('Cradle\Resolver\ResolverTraitStub')) {
	class ResolverTraitStub
	{
		use ResolverTrait;
	}
}

if(!class_exists('Cradle\Resolver\ResolverCallStub')) {
	class ResolverCallStub
	{
		public function foo($string)
		{
			return $string . 'foo';
		}
	}
}

if(!class_exists('Cradle\Resolver\ResolverAddStub')) {
	class ResolverAddStub
	{
		public function foo($string)
		{
			return $string . 'foo';
		}
	}
}

if(!class_exists('Cradle\Resolver\ResolverSharedStub')) {
	class ResolverSharedStub
	{
		public $name = 'foo';

		public function foo($string)
		{
			$name = $this->name;
			$this->name = $string;
			return $string . $name;
		}

		public function reset()
		{
			$this->name = 'foo';
			return $this;
		}
	}
}

if(!class_exists('Cradle\Resolver\ResolverStaticStub')) {
	class ResolverStaticStub
	{
		public static function foo($string)
		{
			return $string . 'foo';
		}
	}
}

if(!class_exists('Cradle\Resolver\ResolverHandlerStub')) {
	class ResolverHandlerStub extends ResolverHandler
	{
	}
}
