<?php

namespace Cradle\Http;

use StdClass;
use PHPUnit_Framework_TestCase;
use Cradle\Http\HttpDispatcher;
use Cradle\Http\Request;
use Cradle\Http\Response;
use Cradle\Http\Router;
use Cradle\Http\Middleware;

use Cradle\Resolver\ResolverHandler;
use Cradle\Event\EventHandler;
use Cradle\Profiler\InspectorHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:33.
 */
class Cradle_Http_HttpHandler_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var HttpHandler
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new HttpHandler;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Http\HttpHandler::prepare
     */
    public function testPrepare()
    {
        $this->assertTrue($this->object->prepare());
    }

    /**
     * @covers Cradle\Http\HttpHandler::process
     */
    public function testProcess()
    {
        $this->assertTrue($this->object->process());
    }

    /**
     * @covers Cradle\Http\HttpHandler::render
     */
    public function testRender()
    {
        $this->object->getResponse()->setContent('foobar');
        $instance = $this->object->render(true);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::shutdown
     */
    public function testShutdown()
    {
        $this->assertTrue($this->object->shutdown());
    }

    /**
     * @covers Cradle\Http\HttpHandler::getDispatcher
     */
    public function testGetDispatcher()
    {
        $instance = $this->object->getDispatcher();
        $this->assertInstanceOf('Cradle\Http\HttpDispatcher', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setDispatcher
     */
    public function testSetDispatcher()
    {
        $instance = $this->object->setDispatcher(new HttpDispatcher);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::getPreprocessor
     */
    public function testGetPreprocessor()
    {
        $instance = $this->object->getPreprocessor();
        $this->assertInstanceOf('Cradle\Http\Middleware', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::preprocess
     */
    public function testPreprocess()
    {
        $instance = $this->object->preprocess(function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setPreprocessor
     */
    public function testSetPreprocessor()
    {
        $instance = $this->object->setPreprocessor(new Middleware);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::getPostprocessor
     */
    public function testGetPostprocessor()
    {
        $instance = $this->object->getPostprocessor();
        $this->assertInstanceOf('Cradle\Http\Middleware', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::postprocess
     */
    public function testPostprocess()
    {
        $instance = $this->object->postprocess(function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setPostprocessor
     */
    public function testSetPostprocessor()
    {
        $instance = $this->object->setPostprocessor(new Middleware);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::getErrorProcessor
     */
    public function testGetErrorProcessor()
    {
        $instance = $this->object->getErrorProcessor();
        $this->assertInstanceOf('Cradle\Http\Middleware', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::error
     */
    public function testError()
    {
        $instance = $this->object->error(function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setErrorProcessor
     */
    public function testSetErrorProcessor()
    {
        $instance = $this->object->setErrorProcessor(new Middleware);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::getRequest
     */
    public function testGetRequest()
    {
        $instance = $this->object->getRequest();
        $this->assertInstanceOf('Cradle\Http\Request', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setRequest
     */
    public function testSetRequest()
    {
        $instance = $this->object->setRequest(new Request);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::getResponse
     */
    public function testGetResponse()
    {
        $instance = $this->object->getResponse();
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setResponse
     */
    public function testSetResponse()
    {
        $instance = $this->object->setResponse(new Response);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::all
     */
    public function testAll()
    {
        $instance = $this->object->all('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::delete
     */
    public function testDelete()
    {
        $instance = $this->object->delete('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::get
     */
    public function testGet()
    {
        $instance = $this->object->get('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::getRouter
     */
    public function testGetRouter()
    {
        $instance = $this->object->getRouter();
        $this->assertInstanceOf('Cradle\Http\Router', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::post
     */
    public function testPost()
    {
        $instance = $this->object->post('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::put
     */
    public function testPut()
    {
        $instance = $this->object->put('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::route
     */
    public function testRoute()
    {
        $instance = $this->object->route('foobar', '/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setRouter
     */
    public function testSetRouter()
    {
        $instance = $this->object->setRouter(new Router);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::getEventHandler
     */
    public function testGetEventHandler()
    {
        $instance = $this->object->getEventHandler();
        $this->assertInstanceOf('Cradle\Event\EventHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::on
     */
    public function testOn()
    {
        $trigger = new StdClass();
        $trigger->success = null;
        
        $callback = function() use ($trigger) {
            $trigger->success = true;
        };
        
        $instance = $this
            ->object
            ->on('foobar', $callback)
            ->trigger('foobar');
        
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
        $this->assertTrue($trigger->success);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setEventHandler
     */
    public function testSetEventHandler()
    {
        $instance = $this->object->setEventHandler(new EventHandler);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::trigger
     */
    public function testTrigger()
    {
        $trigger = new StdClass();
        $trigger->success = null;
        
        $callback = function() use ($trigger) {
            $trigger->success = true;
        };
        
        $instance = $this
            ->object
            ->on('foobar', $callback)
            ->trigger('foobar');
        
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
        $this->assertTrue($trigger->success);
    }

    /**
     * @covers Cradle\Http\HttpHandler::bindCallback
     */
    public function testBindCallback()
    {
        $trigger = new StdClass;
        $trigger->success = null;
        $trigger->test = $this;
        
        $callback = $this->object->bindCallback(function() use ($trigger) {
            $trigger->success = true;
            $trigger->test->assertInstanceOf('Cradle\Http\HttpHandler', $this);
        });
        
        $callback();
        
        $this->assertTrue($trigger->success);
    }

    /**
     * @covers Cradle\Http\HttpHandler::i
     */
    public function testI()
    {
        $instance1 = HttpHandler::i();
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance1);
        
        $instance2 = HttpHandler::i();
        $this->assertTrue($instance1 !== $instance2);
    }

    /**
     * @covers Cradle\Http\HttpHandler::loop
     */
    public function testLoop()
    {
        $self = $this;
        $this->object->loop(function($i) use ($self) {
            $self->assertInstanceOf('Cradle\Http\HttpHandler', $this);
            
            if ($i == 2) {
                return false;
            }
        });
    }

    /**
     * @covers Cradle\Http\HttpHandler::when
     */
    public function testWhen()
    {
        $self = $this;
        $test = 'Good';
        $this->object->when(function() use ($self) {
            $self->assertInstanceOf('Cradle\Http\HttpHandler', $this);
            return false;
        }, function() use ($self, &$test) {
            $self->assertInstanceOf('Cradle\Http\HttpHandler', $this);
            $test = 'Bad';
        });
    }

    /**
     * @covers Cradle\Http\HttpHandler::getInspectorHandler
     */
    public function testGetInspectorHandler()
    {
        $instance = $this->object->getInspectorHandler();
        $this->assertInstanceOf('Cradle\Profiler\InspectorHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::inspect
     */
    public function testInspect()
    {
        ob_start();
        $this->object->inspect('foobar');
        $contents = ob_get_contents();
        ob_end_clean();  
        
        $this->assertEquals(
            '<pre>INSPECTING Variable:</pre><pre>foobar</pre>', 
            $contents
        );
    }

    /**
     * @covers Cradle\Http\HttpHandler::setInspectorHandler
     */
    public function testSetInspectorHandler()
    {
        $instance = $this->object->setInspectorHandler(new InspectorHandler);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::addLogger
     */
    public function testAddLogger()
    {
        $instance = $this->object->addLogger(function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $instance);
    }

    /**
     * @covers Cradle\Http\HttpHandler::log
     */
    public function testLog()
    {
        $trigger = new StdClass();
        $trigger->success = null;
        $this->object->addLogger(function($trigger) {
            $trigger->success = true;
        })
        ->log($trigger);
        
        
        $this->assertTrue($trigger->success);
    }

    /**
     * @covers Cradle\Http\HttpHandler::loadState
     */
    public function testLoadState()
    {
        $state1 = new HttpHandler();
        $state2 = new HttpHandler();
        
        $state1->saveState('state1');
        $state2->saveState('state2');
        
        $this->assertTrue($state2 === $state1->loadState('state2'));
        $this->assertTrue($state1 === $state2->loadState('state1'));
    }

    /**
     * @covers Cradle\Http\HttpHandler::saveState
     */
    public function testSaveState()
    {
        $state1 = new HttpHandler();
        $state2 = new HttpHandler();
        
        $state1->saveState('state1');
        $state2->saveState('state2');
        
        $this->assertTrue($state2 === $state1->loadState('state2'));
        $this->assertTrue($state1 === $state2->loadState('state1'));
    }

    /**
     * @covers Cradle\Http\HttpHandler::__call
     */
    public function test__call()
    {
        $actual = $this->object->addResolver(ResolverCallStub::class, function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $actual);
    }

    /**
     * @covers Cradle\Http\HttpHandler::__callResolver
     */
    public function test__callResolver()
    {
        $actual = $this->object->addResolver(ResolverCallStub::class, function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $actual);
    }

    /**
     * @covers Cradle\Http\HttpHandler::addResolver
     */
    public function testAddResolver()
    {
        $actual = $this->object->addResolver(ResolverCallStub::class, function() {});
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $actual);
    }

    /**
     * @covers Cradle\Http\HttpHandler::getResolverHandler
     */
    public function testGetResolverHandler()
    {
        $actual = $this->object->getResolverHandler();
        $this->assertInstanceOf('Cradle\Resolver\ResolverHandler', $actual);
    }

    /**
     * @covers Cradle\Http\HttpHandler::resolve
     */
    public function testResolve()
    {
        $actual = $this->object->addResolver(
            ResolverCallStub::class, 
            function() {
                return new ResolverAddStub();
            }
        )
        ->resolve(ResolverCallStub::class)
        ->foo('bar');
        
        $this->assertEquals('barfoo', $actual);
    }

    /**
     * @covers Cradle\Http\HttpHandler::resolveShared
     */
    public function testResolveShared()
    {
        $actual = $this
            ->object
            ->resolveShared(ResolverSharedStub::class)
            ->reset()
            ->foo('bar');
        
        $this->assertEquals('barfoo', $actual);
        
        $actual = $this
            ->object
            ->resolveShared(ResolverSharedStub::class)
            ->foo('bar');
        
        $this->assertEquals('barbar', $actual);
    }

    /**
     * @covers Cradle\Http\HttpHandler::resolveStatic
     */
    public function testResolveStatic()
    {
        $actual = $this
            ->object
            ->resolveStatic(
                ResolverStaticStub::class, 
                'foo', 
                'bar'
            );
        
        $this->assertEquals('barfoo', $actual);
    }

    /**
     * @covers Cradle\Http\HttpHandler::setResolverHandler
     */
    public function testSetResolverHandler()
    {
        $actual = $this->object->setResolverHandler(new ResolverHandler);
        $this->assertInstanceOf('Cradle\Http\HttpHandler', $actual);
    }
}

if(!class_exists('Cradle\Http\ResolverCallStub')) {
    class ResolverCallStub
    {
        public function foo($string)
        {
            return $string . 'foo';
        }
    }
}

if(!class_exists('Cradle\Http\ResolverAddStub')) {
    class ResolverAddStub
    {
        public function foo($string)
        {
            return $string . 'foo';
        }
    }
}

if(!class_exists('Cradle\Http\ResolverSharedStub')) {
    class ResolverSharedStub
    {
        public $name = 'foo';
        
        public function foo($string)
        {
            $name = $this->name;
            $this->name = $string;
            return $string . $name;
        }
        
        public function reset()
        {
            $this->name = 'foo';
            return $this;
        }
    }
}

if(!class_exists('Cradle\Http\ResolverStaticStub')) {
    class ResolverStaticStub
    {
        public static function foo($string)
        {
            return $string . 'foo';
        }
    }
}