<?php

namespace Cradle\Http\Response;

use PHPUnit_Framework_TestCase;
use Cradle\Data\Registry;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:34.
 */
class Cradle_Http_Response_HeaderTrait_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var HeaderTrait
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new HeaderTraitStub(array(
            'headers' => array(
                'foo' => 'bar',
                'bar' => 'foo'
            )
        ));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * covers Cradle\Http\Response\HeaderTrait::addHeader
     */
    public function testAddHeader()
    {
        $instance = $this->object->addHeader('zoo', 'foo');
        $this->assertInstanceOf('Cradle\Http\Response\HeaderTraitStub', $instance);

        $instance = $this->object->addHeader('zoo');
        $this->assertInstanceOf('Cradle\Http\Response\HeaderTraitStub', $instance);
    }

    /**
     * covers Cradle\Http\Response\HeaderTrait::getHeaders
     */
    public function testGetHeaders()
    {
        $actual = $this->object->getHeaders();
        $this->assertArrayHasKey('foo', $actual);
        $actual = $this->object->getHeaders('foo');
        $this->assertEquals('bar', $actual);
    }

    /**
     * covers Cradle\Http\Response\HeaderTrait::removeHeader
     */
    public function testRemoveHeader()
    {
        $instance = $this->object->removeHeader('foo');
        $this->assertInstanceOf('Cradle\Http\Response\HeaderTraitStub', $instance);
    }
}

if(!class_exists('Cradle\Http\Response\HeaderTraitStub')) {
    class HeaderTraitStub extends Registry
    {
        use HeaderTrait;
    }
}
