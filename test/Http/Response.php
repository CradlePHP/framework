<?php

namespace Cradle\Http;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:33.
 * Magic replacer \n\s+\*\s\@todo\s+ Implement\s[a-zA-Z0-9]+\(\)\.
 */
class Cradle_Http_Response_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var Response
     */
    protected $object;

    /**
     * @var Response
     */
    protected $rest;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Response(array(
            'code' => 200,
            'headers' => array(
                'foo' => 'bar',
                'bar' => 'foo'
            ),
            'json' => array(
                'foo' => 'bar',
                'bar' => 'foo'
            ),
            'page' => array(
                'title' => 'foobar',
                'flash' => array(
                    'message' => 'bar',
                    'type' => 'foo'
                ),
                'meta' => array(
                    'foo' => 'bar',
                    'bar' => 'foo'
                )
            ),
            'body' => 'foobar'
        ));

        $this->rest = new Response(array(
            'code' => 200,
            'headers' => array(
                'foo' => 'bar',
                'bar' => 'foo'
            ),
            'json' => array(
                'error' => true,
                'message' => 'foobar',
                'validation' => array(
                    'foo' => 'bar',
                    'bar' => 'foo'
                ),
                'results' => array(
                    'foo' => 'bar',
                    'bar' => 'foo'
                )
            )
        ));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Http\Response::load
     */
    public function testLoad()
    {
        $instance = $this->object->load();
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::getContent
     */
    public function testGetContent()
    {
        $actual = $this->object->getContent();
        $this->assertEquals('foobar', $actual);
    }

    /**
     * @covers Cradle\Http\Response::hasContent
     */
    public function testHasContent()
    {
        $this->assertTrue($this->object->hasContent());
    }

    /**
     * @covers Cradle\Http\Response::setContent
     */
    public function testSetContent()
    {
        $instance = $this->object->setContent('foobar');

        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::addHeader
     */
    public function testAddHeader()
    {
        $instance = $this->object->addHeader('zoo', 'foo');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::getHeaders
     */
    public function testGetHeaders()
    {
        $actual = $this->object->getHeaders();
        $this->assertArrayHasKey('foo', $actual);
        $actual = $this->object->getHeaders('foo');
        $this->assertEquals('bar', $actual);
    }

    /**
     * covers Cradle\Http\Response\PageTrait::addMeta
     */
    public function testAddMeta()
    {
        $instance = $this->object->addMeta('zoo', 'foo');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * covers Cradle\Http\Response\PageTrait::getFlash
     */
    public function testGetFlash()
    {
        $actual = $this->object->getFlash();
        $this->assertArrayHasKey('message', $actual);
        $this->assertEquals('foo', $actual['type']);
    }

    /**
     * covers Cradle\Http\Response\PageTrait::getMeta
     */
    public function testGetMeta()
    {
        $actual = $this->object->getMeta();
        $this->assertArrayHasKey('foo', $actual);
        $actual = $this->object->getMeta('foo');
        $this->assertEquals('bar', $actual);
    }

    /**
     * covers Cradle\Http\Response\PageTrait::getPage
     */
    public function testGetPage()
    {
        $actual = $this->object->getPage();
        $this->assertArrayHasKey('title', $actual);
        $actual = $this->object->getPage('flash', 'message');
        $this->assertEquals('bar', $actual);
    }

    /**
     * covers Cradle\Http\Response\PageTrait::hasPage
     */
    public function testHasPage()
    {
        $this->assertTrue($this->object->hasPage());
    }

    /**
     * covers Cradle\Http\Response\PageTrait::removePage
     */
    public function testRemovePage()
    {
        $instance = $this->object->removePage('meta');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * covers Cradle\Http\Response\PageTrait::setFlash
     */
    public function testSetFlash()
    {
        $instance = $this->object->setFlash('foo', 'bar');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * covers Cradle\Http\Response\PageTrait::setPage
     */
    public function testSetPage()
    {
        $instance = $this->object->setPage('foo', 'bar');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * covers Cradle\Http\Response\PageTrait::setTitle
     */
    public function testSetTitle()
    {
        $instance = $this->object->setTitle('foo');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::addValidation
     */
    public function testAddValidation()
    {
        $instance = $this->rest->addValidation('zoo', 'foo');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::getResults
     */
    public function testGetResults()
    {
        $actual = $this->rest->getResults();
        $this->assertArrayHasKey('foo', $actual);
        $actual = $this->rest->getResults('foo');
        $this->assertEquals('bar', $actual);
    }

    /**
     * covers Cradle\Http\Response::getMessage
     */
    public function testGetMessage()
    {
        $actual = $this->rest->getMessage();
        $this->assertEquals('foobar', $actual);
    }

    /**
     * covers Cradle\Http\Response::getMessageType
     */
    public function testGetMessageType()
    {
        $actual = $this->rest->getMessageType();
        $this->assertEquals('error', $actual);

        $this->rest->setError(false);
        $actual = $this->rest->getMessageType();
        $this->assertEquals('success', $actual);

        $this->rest->setError(null);
        $actual = $this->rest->getMessageType();
        $this->assertEquals('info', $actual);
    }

    /**
     * @covers Cradle\Http\Response::getValidation
     */
    public function testGetValidation()
    {
        $actual = $this->rest->getValidation();
        $this->assertArrayHasKey('foo', $actual);
        $actual = $this->rest->getValidation('foo');
        $this->assertEquals('bar', $actual);
    }

    /**
     * covers Cradle\Http\Response::hasJson
     */
    public function testHasJson()
    {
        $this->assertTrue($this->object->hasJson());
    }

    /**
     * covers Cradle\Http\Response::hasMessage
     */
    public function testHasMessage()
    {
        $this->assertTrue($this->rest->hasMessage());
    }

    /**
     * covers Cradle\Http\Response::hasResults
     */
    public function testHasResults()
    {
        $this->assertTrue($this->rest->hasResults());
        $this->assertTrue($this->rest->hasResults('foo'));
        $this->assertFalse($this->rest->hasResults('zoo'));
    }

    /**
     * covers Cradle\Http\Response::hasValidation
     */
    public function testHasValidation()
    {
        $this->assertTrue($this->rest->hasValidation());
        $this->assertTrue($this->rest->hasValidation('foo'));
        $this->assertFalse($this->rest->hasValidation('zoo'));
    }

    /**
     * covers Cradle\Http\Response::isError
     */
    public function testIsError()
    {
        $this->assertTrue($this->rest->isError());

        $this->rest->setError(false);
        $this->assertFalse($this->rest->isError());

        $this->rest->setError(null);
        $this->assertFalse($this->rest->isError());
    }

    /**
     * covers Cradle\Http\Response::isSuccess
     */
    public function testIsSuccess()
    {
        $this->assertFalse($this->rest->isSuccess());

        $this->rest->setError(false);
        $this->assertTrue($this->rest->isSuccess());

        $this->rest->setError(null);
        $this->assertFalse($this->rest->isSuccess());
    }

    /**
     * covers Cradle\Http\Response::removeResults
     */
    public function testRemoveResults()
    {
        $instance = $this->rest->removeResults('foo');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * covers Cradle\Http\Response::removeValidation
     */
    public function testRemoveValidation()
    {
        $instance = $this->rest->removeValidation('foo');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }


    /**
     * @covers Cradle\Http\Response::setError
     */
    public function testSetError()
    {
        $instance = $this->rest->setError(false);
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::setResults
     */
    public function testSetResults()
    {
        $instance = $this->rest->setResults('zoo', 'foo');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::getStatus
     */
    public function testGetStatus()
    {
        $code = $this->object->getStatus();
        $this->assertEquals(200, $code);
    }

    /**
     * @covers Cradle\Http\Response::setStatus
     */
    public function testSetStatus()
    {
        $instance = $this->object->setStatus(404, '404 Not Found');
        $this->assertInstanceOf('Cradle\Http\Response', $instance);
    }
}
