<?php

namespace Cradle\Http\Router;

use PHPUnit_Framework_TestCase;
use Cradle\Http\Router;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:01.
 */
class Cradle_Http_RouterTrait_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var RouterTrait
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new RouterTraitStub;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * covers Cradle\Http\RouterTrait::all
     */
    public function testAll()
    {
        $instance = $this->object->all('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\Router\RouterTraitStub', $instance);
    }

    /**
     * covers Cradle\Http\RouterTrait::delete
     */
    public function testDelete()
    {
        $instance = $this->object->delete('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\Router\RouterTraitStub', $instance);
    }

    /**
     * covers Cradle\Http\RouterTrait::get
     */
    public function testGet()
    {
        $instance = $this->object->get('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\Router\RouterTraitStub', $instance);
    }

    /**
     * covers Cradle\Http\RouterTrait::getRouter
     */
    public function testGetRouter()
    {
        $instance = $this->object->getRouter();
        $this->assertInstanceOf('Cradle\Http\Router', $instance);
    }

    /**
     * covers Cradle\Http\RouterTrait::post
     */
    public function testPost()
    {
        $instance = $this->object->post('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\Router\RouterTraitStub', $instance);
    }

    /**
     * covers Cradle\Http\RouterTrait::put
     */
    public function testPut()
    {
        $instance = $this->object->put('/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\Router\RouterTraitStub', $instance);
    }

    /**
     * covers Cradle\Http\RouterTrait::route
     */
    public function testRoute()
    {
        $instance = $this->object->route('foobar', '/foo/bar', function() {});
        $this->assertInstanceOf('Cradle\Http\Router\RouterTraitStub', $instance);
    }

    /**
     * covers Cradle\Http\RouterTrait::setRouter
     */
    public function testSetRouter()
    {
        $instance = $this->object->setRouter(new Router);
        $this->assertInstanceOf('Cradle\Http\Router\RouterTraitStub', $instance);
    }
}

if(!class_exists('Cradle\Http\Router\RouterTraitStub')) {
    class RouterTraitStub
    {
        use RouterTrait;
    }
}
